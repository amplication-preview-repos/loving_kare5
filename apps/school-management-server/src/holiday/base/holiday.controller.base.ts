/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HolidayService } from "../holiday.service";
import { HolidayCreateInput } from "./HolidayCreateInput";
import { Holiday } from "./Holiday";
import { HolidayFindManyArgs } from "./HolidayFindManyArgs";
import { HolidayWhereUniqueInput } from "./HolidayWhereUniqueInput";
import { HolidayUpdateInput } from "./HolidayUpdateInput";

export class HolidayControllerBase {
  constructor(protected readonly service: HolidayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Holiday })
  async createHoliday(
    @common.Body() data: HolidayCreateInput
  ): Promise<Holiday> {
    return await this.service.createHoliday({
      data: {
        ...data,

        calendar: data.calendar
          ? {
              connect: data.calendar,
            }
          : undefined,
      },
      select: {
        calendar: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Holiday] })
  @ApiNestedQuery(HolidayFindManyArgs)
  async holidays(@common.Req() request: Request): Promise<Holiday[]> {
    const args = plainToClass(HolidayFindManyArgs, request.query);
    return this.service.holidays({
      ...args,
      select: {
        calendar: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Holiday })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async holiday(
    @common.Param() params: HolidayWhereUniqueInput
  ): Promise<Holiday | null> {
    const result = await this.service.holiday({
      where: params,
      select: {
        calendar: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Holiday })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHoliday(
    @common.Param() params: HolidayWhereUniqueInput,
    @common.Body() data: HolidayUpdateInput
  ): Promise<Holiday | null> {
    try {
      return await this.service.updateHoliday({
        where: params,
        data: {
          ...data,

          calendar: data.calendar
            ? {
                connect: data.calendar,
              }
            : undefined,
        },
        select: {
          calendar: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          description: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Holiday })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHoliday(
    @common.Param() params: HolidayWhereUniqueInput
  ): Promise<Holiday | null> {
    try {
      return await this.service.deleteHoliday({
        where: params,
        select: {
          calendar: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          description: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
