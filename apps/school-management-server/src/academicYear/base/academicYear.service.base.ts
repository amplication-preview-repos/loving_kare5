/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AcademicYear as PrismaAcademicYear,
  Term as PrismaTerm,
  School as PrismaSchool,
} from "@prisma/client";

export class AcademicYearServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AcademicYearCountArgs, "select">
  ): Promise<number> {
    return this.prisma.academicYear.count(args);
  }

  async academicYears(
    args: Prisma.AcademicYearFindManyArgs
  ): Promise<PrismaAcademicYear[]> {
    return this.prisma.academicYear.findMany(args);
  }
  async academicYear(
    args: Prisma.AcademicYearFindUniqueArgs
  ): Promise<PrismaAcademicYear | null> {
    return this.prisma.academicYear.findUnique(args);
  }
  async createAcademicYear(
    args: Prisma.AcademicYearCreateArgs
  ): Promise<PrismaAcademicYear> {
    return this.prisma.academicYear.create(args);
  }
  async updateAcademicYear(
    args: Prisma.AcademicYearUpdateArgs
  ): Promise<PrismaAcademicYear> {
    return this.prisma.academicYear.update(args);
  }
  async deleteAcademicYear(
    args: Prisma.AcademicYearDeleteArgs
  ): Promise<PrismaAcademicYear> {
    return this.prisma.academicYear.delete(args);
  }

  async findTerms(
    parentId: string,
    args: Prisma.TermFindManyArgs
  ): Promise<PrismaTerm[]> {
    return this.prisma.academicYear
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .terms(args);
  }

  async getSchool(parentId: string): Promise<PrismaSchool | null> {
    return this.prisma.academicYear
      .findUnique({
        where: { id: parentId },
      })
      .school();
  }
}
