/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  School as PrismaSchool,
  AcademicYear as PrismaAcademicYear,
  User as PrismaUser,
} from "@prisma/client";

export class SchoolServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SchoolCountArgs, "select">): Promise<number> {
    return this.prisma.school.count(args);
  }

  async schools(args: Prisma.SchoolFindManyArgs): Promise<PrismaSchool[]> {
    return this.prisma.school.findMany(args);
  }
  async school(
    args: Prisma.SchoolFindUniqueArgs
  ): Promise<PrismaSchool | null> {
    return this.prisma.school.findUnique(args);
  }
  async createSchool(args: Prisma.SchoolCreateArgs): Promise<PrismaSchool> {
    return this.prisma.school.create(args);
  }
  async updateSchool(args: Prisma.SchoolUpdateArgs): Promise<PrismaSchool> {
    return this.prisma.school.update(args);
  }
  async deleteSchool(args: Prisma.SchoolDeleteArgs): Promise<PrismaSchool> {
    return this.prisma.school.delete(args);
  }

  async findAcademicYears(
    parentId: string,
    args: Prisma.AcademicYearFindManyArgs
  ): Promise<PrismaAcademicYear[]> {
    return this.prisma.school
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .academicYears(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.school
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
