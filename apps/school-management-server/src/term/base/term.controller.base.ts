/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TermService } from "../term.service";
import { TermCreateInput } from "./TermCreateInput";
import { Term } from "./Term";
import { TermFindManyArgs } from "./TermFindManyArgs";
import { TermWhereUniqueInput } from "./TermWhereUniqueInput";
import { TermUpdateInput } from "./TermUpdateInput";

export class TermControllerBase {
  constructor(protected readonly service: TermService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Term })
  async createTerm(@common.Body() data: TermCreateInput): Promise<Term> {
    return await this.service.createTerm({
      data: {
        ...data,

        academicYear: data.academicYear
          ? {
              connect: data.academicYear,
            }
          : undefined,
      },
      select: {
        academicYear: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Term] })
  @ApiNestedQuery(TermFindManyArgs)
  async terms(@common.Req() request: Request): Promise<Term[]> {
    const args = plainToClass(TermFindManyArgs, request.query);
    return this.service.terms({
      ...args,
      select: {
        academicYear: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Term })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async term(
    @common.Param() params: TermWhereUniqueInput
  ): Promise<Term | null> {
    const result = await this.service.term({
      where: params,
      select: {
        academicYear: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Term })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTerm(
    @common.Param() params: TermWhereUniqueInput,
    @common.Body() data: TermUpdateInput
  ): Promise<Term | null> {
    try {
      return await this.service.updateTerm({
        where: params,
        data: {
          ...data,

          academicYear: data.academicYear
            ? {
                connect: data.academicYear,
              }
            : undefined,
        },
        select: {
          academicYear: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Term })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTerm(
    @common.Param() params: TermWhereUniqueInput
  ): Promise<Term | null> {
    try {
      return await this.service.deleteTerm({
        where: params,
        select: {
          academicYear: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
