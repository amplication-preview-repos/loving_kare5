/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Term } from "./Term";
import { TermCountArgs } from "./TermCountArgs";
import { TermFindManyArgs } from "./TermFindManyArgs";
import { TermFindUniqueArgs } from "./TermFindUniqueArgs";
import { CreateTermArgs } from "./CreateTermArgs";
import { UpdateTermArgs } from "./UpdateTermArgs";
import { DeleteTermArgs } from "./DeleteTermArgs";
import { AcademicYear } from "../../academicYear/base/AcademicYear";
import { TermService } from "../term.service";
@graphql.Resolver(() => Term)
export class TermResolverBase {
  constructor(protected readonly service: TermService) {}

  async _termsMeta(
    @graphql.Args() args: TermCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Term])
  async terms(@graphql.Args() args: TermFindManyArgs): Promise<Term[]> {
    return this.service.terms(args);
  }

  @graphql.Query(() => Term, { nullable: true })
  async term(@graphql.Args() args: TermFindUniqueArgs): Promise<Term | null> {
    const result = await this.service.term(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Term)
  async createTerm(@graphql.Args() args: CreateTermArgs): Promise<Term> {
    return await this.service.createTerm({
      ...args,
      data: {
        ...args.data,

        academicYear: args.data.academicYear
          ? {
              connect: args.data.academicYear,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Term)
  async updateTerm(@graphql.Args() args: UpdateTermArgs): Promise<Term | null> {
    try {
      return await this.service.updateTerm({
        ...args,
        data: {
          ...args.data,

          academicYear: args.data.academicYear
            ? {
                connect: args.data.academicYear,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Term)
  async deleteTerm(@graphql.Args() args: DeleteTermArgs): Promise<Term | null> {
    try {
      return await this.service.deleteTerm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AcademicYear, {
    nullable: true,
    name: "academicYear",
  })
  async getAcademicYear(
    @graphql.Parent() parent: Term
  ): Promise<AcademicYear | null> {
    const result = await this.service.getAcademicYear(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
