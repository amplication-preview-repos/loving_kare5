/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Term as PrismaTerm,
  AcademicYear as PrismaAcademicYear,
} from "@prisma/client";

export class TermServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TermCountArgs, "select">): Promise<number> {
    return this.prisma.term.count(args);
  }

  async terms(args: Prisma.TermFindManyArgs): Promise<PrismaTerm[]> {
    return this.prisma.term.findMany(args);
  }
  async term(args: Prisma.TermFindUniqueArgs): Promise<PrismaTerm | null> {
    return this.prisma.term.findUnique(args);
  }
  async createTerm(args: Prisma.TermCreateArgs): Promise<PrismaTerm> {
    return this.prisma.term.create(args);
  }
  async updateTerm(args: Prisma.TermUpdateArgs): Promise<PrismaTerm> {
    return this.prisma.term.update(args);
  }
  async deleteTerm(args: Prisma.TermDeleteArgs): Promise<PrismaTerm> {
    return this.prisma.term.delete(args);
  }

  async getAcademicYear(parentId: string): Promise<PrismaAcademicYear | null> {
    return this.prisma.term
      .findUnique({
        where: { id: parentId },
      })
      .academicYear();
  }
}
