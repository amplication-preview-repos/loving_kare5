datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model School {
  academicYears AcademicYear[]
  createdAt     DateTime       @default(now())
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  updatedAt     DateTime       @updatedAt
  users         User[]
}

model Term {
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?       @db.ObjectId
  createdAt      DateTime      @default(now())
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  updatedAt      DateTime      @updatedAt
}

model AcademicYear {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    School?  @relation(fields: [schoolId], references: [id])
  schoolId  String?  @db.ObjectId
  terms     Term[]
  updatedAt DateTime @updatedAt
  year      Int?
}

model Holiday {
  calendar    Calendar? @relation(fields: [calendarId], references: [id])
  calendarId  String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  date        DateTime?
  description String?
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  updatedAt   DateTime  @updatedAt
}

model Section {
  createdAt DateTime @default(now())
  grade     Grade?   @relation(fields: [gradeId], references: [id])
  gradeId   String?  @db.ObjectId
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  updatedAt DateTime @updatedAt
  users     User[]
}

model Grade {
  createdAt DateTime  @default(now())
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  sections  Section[]
  updatedAt DateTime  @updatedAt
  users     User[]
}

model Calendar {
  createdAt DateTime               @default(now())
  date      DateTime?
  event     Event?                 @relation(name: "CalendarsOnEvent", fields: [eventId], references: [id])
  eventId   String?                @db.ObjectId
  events    Event[]                @relation(name: "CalendarOnEvents")
  holidays  Holiday[]
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  typeField EnumCalendarTypeField?
  updatedAt DateTime               @updatedAt
}

model Subject {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  updatedAt DateTime @updatedAt
}

model Event {
  calendar    Calendar?  @relation(name: "CalendarOnEvents", fields: [calendarId], references: [id])
  calendarId  String?    @db.ObjectId
  calendars   Calendar[] @relation(name: "CalendarsOnEvent")
  createdAt   DateTime   @default(now())
  description String?
  endTime     DateTime?
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  location    String?
  startTime   DateTime?
  title       String?
  updatedAt   DateTime   @updatedAt
}

model User {
  createdAt DateTime      @default(now())
  email     String?       @unique
  firstName String?
  grade     Grade?        @relation(fields: [gradeId], references: [id])
  gradeId   String?       @db.ObjectId
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  lastName  String?
  password  String
  role      EnumUserRole?
  roles     Json
  school    School?       @relation(fields: [schoolId], references: [id])
  schoolId  String?       @db.ObjectId
  section   Section?      @relation(fields: [sectionId], references: [id])
  sectionId String?       @db.ObjectId
  updatedAt DateTime      @updatedAt
  username  String        @unique
}

enum EnumCalendarTypeField {
  Option1
}

enum EnumUserRole {
  Option1
}
